#!/usr/bin/env node
/* ================================================================
 * macaca-client by xdf(xudafeng[at]126.com)
 *
 * first created at : Tue Mar 17 2015 00:16:10 GMT+0800 (CST)
 *
 * ================================================================
 * Copyright 2013 xdf
 *
 * Licensed under the MIT License
 * You may not use this file except in compliance with the License.
 *
 * ================================================================ */

'use strict';

var co = require('co');
var fs = require('fs');
var path = require('path');
var EOL = require('os').EOL;
var chalk = require('chalk');
var pkg = require('../package');
var update = require('npm-update');
var program = require('commander');
var spawn = require('child_process').spawn;
var logger = require('../lib/common/logger');
var signal = require('..').server.signal;

program
  .option('-s, --signal <s>',   'send signal to process: stop, restart')
  .option('-v, --versions',     'show version and exit')
  .option('--verbose',          'show more debugging information')
  .usage('<command> [options] [arguments]')
  .helpInformation = function() {
    return [
      '',
      '  ' + chalk.white(pkg.description),
      '',
      '  Usage:',
      '',
      '    ' + this._name + ' ' + this.usage(),,
      '',
      '  Commands:',
      '',
      '    server          start webdriver server',
      '    doctor          detect environment',
      '    run             run test',
      '',
      '  Options:',
      '',
      '' + this.optionHelp().replace(/^/gm, '    '),
      '',
      '  Further help:',
      '',
      '  ' + chalk.white(pkg.homepage),
      '',
      ''
    ].join(EOL);
  };

program.parse(process.argv);

if (program.versions) {
  console.info('%s  %s%s', EOL, pkg.version, EOL);
  process.exit(0);
}

if (program.signal) {
  signal(program.signal);
  return;
}

var cmd = program.args[0];

if (!cmd) {
  return program.help();
}

var file = path.join(__dirname, pkg.name + '-' + cmd);

if (!fs.existsSync(file)) {
  console.log('%s  command `%s` not found', EOL, chalk.yellow(cmd));
  return program.help();
}

function init(error, data) {

  if (data && data.version && pkg.version !== data.version) {
    console.log(chalk.white('%s  %s'), EOL, new Array(39).join('*'));
    console.log(chalk.white('  *  version %s is outdate          *'), pkg.version);
    console.log(chalk.white('  *  run npm i -g %s@%s  *'), pkg.name, data.version);
    console.log(chalk.white('  %s'), new Array(39).join('*'), EOL);
  }

  var args = program.rawArgs.slice(3);
  args.unshift(file);

  var bootstrap = spawn('node', args, {
    stdio: [process.stdin, process.stdout, 2, 'ipc']
  });

  bootstrap.on('close', function(code) {
    process.exit('process exited with code ' + code);
  });
}

co(update)({
  pkg: pkg,
  callback: init
});
